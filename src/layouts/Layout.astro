---
import { ViewTransitions } from "astro:transitions";
import Header from "../components/Header.astro";
import { formatDate } from "../lib/utils";
import "../styles/global.css";

interface Props {
  title: string;
  description: string;
  image?: string;
  tags?: Array<string>;
  date?: Date;
  className?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const {
  title,
  description,
  image = "/static/blog-placeholder.png",
  tags = [],
  date,
} = Astro.props;
---

<html lang="en">
  <head>
    <!-- Global Metadata -->
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />

    <!-- Font preloads -->
    <link
      rel="preload"
      href="/fonts/geist-variable.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link
      rel="preload"
      href="/fonts/geist-mono-variable.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />

    <!-- Latex Library -->
    <link rel="stylesheet" href="/katex.min.css" />

    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalURL} />

    <!-- Primary Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta
      name="keywords"
      content={[
        "ensyzip",
        "ensy.zip",
        "ensy",
        "security",
        "infosec",
        ...tags,
      ].join(", ")}
    />
    <meta name="robots" content="index, follow" />

    <!-- Open Graph / Facebook -->

    <meta property="og:site_name" content="ensyzip" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(image, Astro.url)} />
    <meta property="og:image:alt" content={title} />
    {
      date ? (
        <>
          <meta
            property="og:article:published_time"
            content={formatDate(date)}
          />
          <meta property="og:article:author" content="ensy" />
          <meta property="og:article:section" content="Cybersecurity" />
          {(tags ?? []).map((k) => (
            <meta property="og:article:tag" content={k ?? ""} />
          ))}
        </>
      ) : (
        <meta property="og:type" content="website" />
      )
    }

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(image, Astro.url)} />

    <ViewTransitions />
  </head>
  <body
    class="font-sans text-zinc-900 antialiased transition-colors dark:bg-neutral-950 dark:text-neutral-400"
  >
    <div class="mx-auto max-w-2xl p-6 text-pretty">
      <Header />
      <slot />
      <footer class="my-4">
        <span class="text-sm">&copy; 2025 ensy. All rights reserved.</span>
      </footer>
    </div>
  </body>
</html>

<script is:inline>
  const setTheme = () => {
    let theme;

    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      theme = localStorage.getItem("theme");
    } else {
      theme = window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";
    }

    document.documentElement.classList[theme ? "add" : "remove"](theme);

    if (typeof localStorage !== "undefined") {
      const observer = new MutationObserver(() => {
        const isDark = document.documentElement.classList.contains("dark");
        localStorage.setItem("theme", isDark ? "dark" : "light");
      });
      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ["class"],
      });
    }
  };

  setTheme();

  document.addEventListener("astro:after-swap", setTheme);
</script>
